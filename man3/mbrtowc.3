.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification
.\"      http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.TH MBRTOWC 3  2011-09-28 "GNU" "Linux Programmer's Manual"
.SH NAME
mbrtowc \- convert a multibyte sequence to a wide character
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "size_t mbrtowc(wchar_t *" pwc ", const char *" s ", size_t " n \
", mbstate_t *" ps );
.fi
.SH DESCRIPTION
The main case for this function is when \fIs\fP is not NULL and \fIpwc\fP is
not NULL.
In this case, the
.BR mbrtowc ()
function inspects at most \fIn\fP
bytes of the multibyte string starting at \fIs\fP, extracts the next complete
multibyte character, converts it to a wide character and stores it at
\fI*pwc\fP.
It updates the shift state \fI*ps\fP.
If the converted wide
character is not L\(aq\\0\(aq (the null wide character),
it returns the number of bytes that were consumed
from \fIs\fP.
If the converted wide character is L\(aq\\0\(aq, it resets the shift
state \fI*ps\fP to the initial state and returns 0.
.PP
If the \fIn\fP bytes starting at \fIs\fP do not contain a complete multibyte
character,
.BR mbrtowc ()
returns \fI(size_t)\ \-2\fP.
This can happen even if
\fIn\fP >= \fIMB_CUR_MAX\fP, if the multibyte string contains redundant shift
sequences.
.PP
If the multibyte string starting at \fIs\fP contains an invalid multibyte
sequence before the next complete character,
.BR mbrtowc ()
returns
\fI(size_t)\ \-1\fP and sets \fIerrno\fP to \fBEILSEQ\fP.
In this case,
the effects on \fI*ps\fP are undefined.
.PP
A different case is when \fIs\fP is not NULL but \fIpwc\fP is NULL.
In this
case the
.BR mbrtowc ()
function behaves as above, except that it does not
store the converted wide character in memory.
.PP
A third case is when \fIs\fP is NULL.
In this case, \fIpwc\fP and \fIn\fP are
ignored.
If the conversion state represented by \fI*ps\fP denotes an
incomplete multibyte character conversion, the
.BR mbrtowc ()
function
returns \fI(size_t)\ \-1\fP, sets \fIerrno\fP to \fBEILSEQ\fP, and
leaves \fI*ps\fP in an undefined state.
Otherwise, the
.BR mbrtowc ()
function
puts \fI*ps\fP in the initial state and returns 0.
.PP
In all of the above cases, if \fIps\fP is a NULL pointer, a static anonymous
state only known to the mbrtowc function is used instead.
Otherwise, \fI*ps\fP must be a valid \fImbstate_t\fP object.
An \fImbstate_t\fP object \fIa\fP can be initialized to the initial state
by zeroing it, for example using
.sp
.in +4n
memset(&a, 0, sizeof(a));
.in
.SH RETURN VALUE
The
.BR mbrtowc ()
function returns the number of bytes parsed from the
multibyte sequence starting at \fIs\fP, if a non-L\(aq\\0\(aq wide character
was recognized.
It returns 0, if a L\(aq\\0\(aq wide character was recognized.
It returns
.I (size_t)\ \-1
and sets \fIerrno\fP to \fBEILSEQ\fP, if an invalid multibyte sequence was
encountered.
It returns \fI(size_t)\ \-2\fP if it couldn't parse a complete multibyte
character, meaning that \fIn\fP should be increased.
.SH ATTRIBUTES
.SS Multithreading (see pthreads(7))
The
.BR mbrtowc ()
function is thread-safe with exceptions.
It is not thread-safe if called with a NULL \fIps\fP parameter.
.SH CONFORMING TO
C99.
.SH NOTES
The behavior of
.BR mbrtowc ()
depends on the
.B LC_CTYPE
category of the
current locale.
.SH SEE ALSO
.BR mbsrtowcs (3)
