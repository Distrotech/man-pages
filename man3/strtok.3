.\" Copyright (C) 1996 Andries Brouwer (aeb@cwi.nl)
.\" and Copyright (C) 2005 Michael Kerrisk (mtk.manpages@gmail.com)
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Rewritten old page, 960210, aeb@cwi.nl
.\" Updated, added strtok_r. 2000-02-13 Nicolás Lichtmaier <nick@debian.org>
.\" 2005-11-17, mtk: Substantial parts rewritten
.\"
.TH STRTOK 3  2012-05-10 "GNU" "Linux Programmer's Manual"
.SH NAME
strtok, strtok_r \- extract tokens from strings
.SH SYNOPSIS
.nf
.B #include <string.h>
.sp
.BI "char *strtok(char *" str ", const char *" delim );
.sp
.BI "char *strtok_r(char *" str ", const char *" delim ", char **" saveptr );
.fi
.sp
.in -4n
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.in
.sp
.ad l
.BR strtok_r ():
_SVID_SOURCE || _BSD_SOURCE || _POSIX_C_SOURCE\ >=\ 1 ||
_XOPEN_SOURCE || _POSIX_SOURCE
.ad b
.SH DESCRIPTION
The
.BR strtok ()
function parses a string into a sequence of tokens.
On the first call to
.BR strtok ()
the string to be parsed should be
specified in \fIstr\fP.
In each subsequent call that should parse the same string,
\fIstr\fP should be NULL.

The \fIdelim\fP argument specifies a set of bytes that
delimit the tokens in the parsed string.
The caller may specify different strings in \fIdelim\fP in successive
calls that parse the same string.

Each call to
.BR strtok ()
returns a pointer to a
null-terminated string containing the next token.
This string does not include the delimiting byte.
If no more tokens are found,
.BR strtok ()
returns NULL.

A sequence of two or more contiguous delimiter bytes in
the parsed string is considered to be a single delimiter.
Delimiter bytes at the start or end of the string are ignored.
Put another way: the tokens returned by
.BR strtok ()
are always nonempty strings.

The
.BR strtok_r ()
function is a reentrant version
.BR strtok ().
The \fIsaveptr\fP argument is a pointer to a
\fIchar *\fP variable that is used internally by
.BR strtok_r ()
in order to maintain context between successive calls that parse the
same string.

On the first call to
.BR strtok_r (),
.I str
should point to the string to be parsed, and the value of
.I saveptr
is ignored.
In subsequent calls, \fIstr\fP should be NULL, and
\fIsaveptr\fP should be unchanged since the previous call.

Different strings may be parsed concurrently using sequences of calls to
.BR strtok_r ()
that specify different \fIsaveptr\fP arguments.
.SH RETURN VALUE
The
.BR strtok ()
and
.BR strtok_r ()
functions return a pointer to
the next token, or NULL if there are no more tokens.
.SH ATTRIBUTES
.SS Multithreading (see pthreads(7))
The
.BR strtok ()
function is not thread-safe.
.LP
The
.BR strtok_r ()
function is thread-safe.
.SH CONFORMING TO
.TP
.BR strtok ()
SVr4, POSIX.1-2001, 4.3BSD, C89, C99.
.TP
.BR strtok_r ()
POSIX.1-2001.
.SH BUGS
Be cautious when using these functions.
If you do use them, note that:
.IP * 2
These functions modify their first argument.
.IP *
These functions cannot be used on constant strings.
.IP *
The identity of the delimiting byte is lost.
.IP *
The
.BR strtok ()
function uses a static buffer while parsing, so it's not thread safe.
Use
.BR strtok_r ()
if this matters to you.
.SH EXAMPLE
The program below uses nested loops that employ
.BR strtok_r ()
to break a string into a two-level hierarchy of tokens.
The first command-line argument specifies the string to be parsed.
The second argument specifies the delimiter byte(s)
to be used to separate that string into "major" tokens.
The third argument specifies the delimiter byte(s)
to be used to separate the "major" tokens into subtokens.
.PP
An example of the output produced by this program is the following:
.PP
.in +4n
.nf
.RB "$" " ./a.out \(aqa/bbb///cc;xxx:yyy:\(aq \(aq:;\(aq \(aq/\(aq"
1: a/bbb///cc
         \-\-> a
         \-\-> bbb
         \-\-> cc
2: xxx
         \-\-> xxx
3: yyy
         \-\-> yyy
.fi
.in
.SS Program source
\&
.nf
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int
main(int argc, char *argv[])
{
    char *str1, *str2, *token, *subtoken;
    char *saveptr1, *saveptr2;
    int j;

    if (argc != 4) {
        fprintf(stderr, "Usage: %s string delim subdelim\\n",
                argv[0]);
        exit(EXIT_FAILURE);
    }

    for (j = 1, str1 = argv[1]; ; j++, str1 = NULL) {
        token = strtok_r(str1, argv[2], &saveptr1);
        if (token == NULL)
            break;
        printf("%d: %s\\n", j, token);

        for (str2 = token; ; str2 = NULL) {
            subtoken = strtok_r(str2, argv[3], &saveptr2);
            if (subtoken == NULL)
                break;
            printf("\t \-\-> %s\\n", subtoken);
        }
    }

    exit(EXIT_SUCCESS);
}
.fi
.PP
Another example program using
.BR strtok ()
can be found in
.BR getaddrinfo_a (3).
.SH SEE ALSO
.BR index (3),
.BR memchr (3),
.BR rindex (3),
.BR strchr (3),
.BR string (3),
.BR strpbrk (3),
.BR strsep (3),
.BR strspn (3),
.BR strstr (3),
.BR wcstok (3)
